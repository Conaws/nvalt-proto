* Associate new information to global state 
	[[Associate new information to global state -- Datascript]]


[[Associate new information to global state -- Reagent]]


Possibly using 
	[[assoc-in]]
	
	* Autocomplete links 
	- Possible implementation 1:
	- As one is typing, an event handler updates the [[global state atom]] 
	- with checks to see whether the last two characters in the text area were "[\[" (start of a link)
	- If they were, then the text area's String value is modified according to what the user types after the "[\[". 
	- Uses a [[search indexer]] on the [[In-memory database]] to find text which matches all note titles.
	- The event handler stops listening after the user types "]\]".




Components 
1.	[[Trigger a change in global state, to initiate autocomplete links]]
2. 	[[Generate List of possible completions from an input]]


		
		



#Questions:
	What are you using to hold the global state?
	
	What part of the global state are you updating on each keyup event
	

datascript connection to update the value of the note
		[[]]
		
		
* Clojure write a string with formatting 
	

PS2: Sometimes it's handy to be able to see what the current directory (so ".") is. You can get the absolute path in two ways:
(System/getProperty "user.dir") 

(-> (java.io.File. ".") .getAbsolutePath)



PS: To be more explicit about the fact that you are reading and writing to a File and not something else, you could first create a File object and then coerce it into a BufferedReader or Writer:
(reader (file "/tmp/test.txt"))
;; or
(writer (file "tmp/test.txt"))
The file function is also in clojure.java.io.

* clojure.core:map 
	For each item `x` in a sequence, applies a function `f` to `x`* clojure.core:subs 
	clojure substring
	calls .substring or whatever* Convert a Directory of Text files to a Mindmap 
	#Problem:
###Given:  
* A directory of text files
	* each of which contains links to other files
		* ? links autocomplete based on other file names in directory

###Do:   
1. Convert the directory into a directed graph, where each file is a node, and internal links in the file are edges.
2. Display the directed graph visually
	*  As a single nested text file 
 	* As a graph proper

-------------------------------------------------------

#Paths:
## ? [[Directory to OrgMode to OPML]] 






------------------------- 
_Parents_ [[Edgemap Prototype]]* Create a directed graph where each file is a node and the links between the nodes are edges 
	Components:

1. [[Read all the files in a directory]]


2.  Find all the links in a file
	[[Search a string for a pattern]]
	
	Kv-map
	
3. Create a graph based on links in each file

				
	
	
	
			


Comparable to [[Features]]
* Create a graph based on links in each file 
	
#Goal
	Turn a directory into a map 
		with cycles


	[[Start at the root node]]
	
		Parse the text of the node
		For any link -- add a child to the parent
		Add a parent of this things Id to that parent
		Add a depth  (check for cycles)
		
		Check that node to see if it has a depth, if it does then just put in a link (as in [[]]) to that node
					you do want things to appear at various levels of the hierarchy as long they aren't cycles.
		 If inserting text does not create a cycle
		 	paste in the content of the node.
		 	otherwise pasted in your link


		*Heading 1
			*link1




#steps

	(def nvaltProto {"Create a directed graph" {:text "string"}}    
	
	Find the root node

	(identify whether the graph is cyclic) 
	
	Place that node in a file
		Wherever you find a link
			Paste in the value of that node 
				But with a header that is of the appropriate depth
					If a link would cause a cycle -- don't substitute it			

  

		 	


	File-Seq the directory
	Filter the ones that end in .txt
	map and juxt in order to get a vector of the filename and the text of the file [name text]
	
	for all the vectors
		on the right element 
			get a set of all links in the set
			
				re-seq to find instances of the links
					use the substring to take off the brackets
			
		end up with 3 tuple  [name text [links]]
		
	
	assume that loom would only want the links
	
	have {:name text}
		{:name nodes}
	
	
	Use Loom to create a di-graph
	
	Let di-graph
	have a variable that stores all the cycles in it (maybe a set)
		:note -- want the connections that cause the cycles
			   :get the path from your starting node back to itself from loom
			   :result 
 
 	
 	
 	Goal:   Get a depth score for each of them
 		   Find all paths from your root node to all the nodes it can reach
 		   Mapping over the paths and counting them
 		   
        
        Filter --- 
        		getting passed b as a possible link
        		if  b have a lower depth score than a 
        		    && is there a cycle that contains both b & a 

	Next steps:
		Treeify
			- Given the shortest paths, depths, and cycles, we can 'treeify' the cyclic graph.
		Tree -> Bulleted list
			- 
		Bulleted list -> replace with textual content of the associated files
			- Use the `files` map 

		
		
	
	[[Give each file a "depth" based on when it was referenced from the root node]]* DataScript 
	* Determine possible completions of a string 
	Take the possible set of matches
As characters come in for query string -- filter the set according to your filter rule generated by the string

	
	
	



#get the matches in a set
	Filter by has one match
	Sort by a rule 


#possible tools
	[[re-group]]
	[[re-find]]
	[[re-matches]]
	





1:  	Use [[fix style searching]] 
	converts string to a regex
		weakness
			won't give you results listed in order of closest match 
		compensation/fix
			[[sorting autocompletions]] 


2:	

		

	
2: 	Leventhein distance

* Directory to OrgMode to OPML 
	Functionality Needed
1.	[[Create a directed graph where each file is a node and the links between the nodes are edges]]
2.	[[Write a .org file which represents the hierarchy of this graph]]
3.	Output this .org file into OPML	

Description: 
We want to look through all of the files in a nValt directory
For each file, we want to grab the file name and the text of the file and store that in a data structure 
	We'll call each pair of title and text a "node"


Components
[[Read all the Files in a Directory]]
* Display full screen 
	- CLJS
	- Built into JS; not available on older browsers
- CLJ
	- [[JavaFX]] has an option* Edgemap Prototype 
	Options


What we want for the text editor
	Autocompletion of files
	[/] Git integration 
	
[[Convert a Directory of Text files to a Mindmap]]

* Editing MVP 
	Editing, for the MVP should be done only in nValt files, which would then be recompiled, so the change would happen automatically* Eliminate any cycles in the graph 
	If there is a cycle in the graph, determine which node is globally lower, for the links from the lower to the higher, represent this as another kind of link 

When used in [[Write a .org file which represents the hierarchy of this graph]]: paste Link text rather than pasting in the text of the node. * Features 
	- Note operations
	- Create a note
	- Rename a note
	- Tag a note
	- Delete a note
- Formatting
	- Create a dashed list automatically â€” able to be indented
	- Bold, italic, strikethrough, make text plain (with corresponding key bindings)
- [[Spelling correction]]
- [[Search notes for text]]
- [[Autocomplete links]]
- Display
	- View/hide notes (title, date modified)
	- Horizontal vs. vertical layout
	- [[Display full screen]]
	- Preview window (plain text -> "pretty" HTML)
- I/O
	- Import note (Load plain text)
	- Markdownify (Load URL/HTML/markdown -> plain text)
	- Export note (Save as plain text)
	- Note autosave (where, as what?)
	- Save as PDF
	- Save preview HTML
- Options
	- Enable markdown completion
- Shortcuts / Key bindings
- Encryption
- Note linking

(I see improvements to be made on the features of nvALT but I will not put them here.)* fix style searching 
	
How is it done?

	Convert "abc" to regex "a.*b.*c"





----------

	http://stackoverflow.com/questions/20234676/how-does-ido-flex-matching-work


	Without looking at the code, I can guess, because the effect is the same, that it is done the same way Icicles does it: add .* after each character in your input except the last, and use string-match to match the resulting regexp against the candidates.
E.g.: Input: abc. Handled as regexp: a.*b.*c. Or similar. All that does is match each of the characters in your input against the candidate, but also allow for possibly other candidate chars in between successive chars of your input. It's a kind of poor man's "fuzzy" matching. More info, including comparison with other fuzzy matching approaches.* General Architecture + Deployment 
	nvALT seems to be able to be recreated with a CLJS frontend (Reagent, DataScript) within a sort of native container such that CLJS can e.g. read/write files/notes.
- This is feasible via Apache Cordova, which is basically a means to deploy HTML5 apps to any platform (desktop, mobile, etc.).
	- There are many plugins available for Cordova, one of which is filesystem access.
	- If one wishes to deploy an nvALT clone to a mobile platform, Cordova might be easier. 
	- Cordova seems to be by far the cleanest.
- This is likely possible in Node, as well, which has I/O support.
- Alternatively, one can use a local CLJ server, communicate with the UI via websockets (Sente), and use the server to perform I/O operations. Then one could use RoboVM to deploy to any mobile device. However, this is a more difficult option and involves more moving parts, if you will. * Generate List of possible completions from an input 
	Purposes of the feature:  

#Challenge:

As the user types, the available autocompletions are scoped to what they have currently typed, based on the potential file names


1   [[Determine possible completions of a string]]

2. Display in the UI
	-	Allow the user to navigate those using arrow keys and tab/return	
		


* Give each file a "depth" based on when it was referenced from the root node 
	Use the shortest path algorithm from loom* Global state atom 
	- Possible implementations:
	- reagent.core/ratom [[Reagent]] (best)
	- freactive.core/atom
		- More efficient than Reagent's atoms and reactive expressions
		- Far less supported
		- Conclusion: Disadvantages outweigh benefits* In-memory database 
	- Best implementation: [[DataScript]]* JavaFX 
	* Load note data into in-memory database 
	Loads note data into an [[in-memory database]].

Possible implementation:
	- Given a `seq` of notes and corresponding note metadata (e.g. tags), for each note ([[clojure.core/map]]), creates a transaction-part consisting of a [[note entity]]
	- Transact the transaction to the [[in-memory database]]* Lucene 
	* March 13, 2016 
	Notes:
	if nvalt fails to autocomplete just change the directory you're pointing to and then change back
	
	

	
	* March 14, 2016 
	12:00 -- 3:01
	Refactoring Alex's Code
3:01 -- 3:12
	Break
3:12 -- 4:09 
	Guitar (some code)
		
4:09 -- 5:00
	[[zipmap]]

5:00 -- 5:24
	[[Clojure write a string with formatting]]
	
5:42
	[[Write a file from nvalt to emacs]]* Note Entity 
	A note with its corresponding metadata. Represented in the [[in-memory database]] according to the defined [[schemas]].

Possible implementation:
	- Note text
		- :note/text, :cardinality :one, :string
	- Note title
		- :note/title, :cardinality :one, :string
	- Tags
		- :note/tags, :cardinality :many, :string* Read all the files in a directory 
	[[Clojure Core Functions]]

Clojure function to grab all the files in a directory
	[[clojure.core/file-seq]]
		Performs a recursive search for all the files in a directory

Read each file as a text string
	Clojure.core/slurp

Do the same thing to each file
	clojure.core/map 
	
	



* Reagent 
	* schemas 
	The schemas of the [[in-memory database]]* Search a string for a pattern 
	[[re-seq]] 

[[Regular Expressions]]
* Search indexer 
	- Possible implementation:
	- [[Lucene]]
		- How to use DataScript with Lucene?
			- Datomic uses Lucene; Datomic could do it* Search notes for text 
	- Searches all notes with every keystroke

- Possible implementation:
	- On application load,
		- [[Read all the files in a directory]]
		- [[Load note data into in-memory database]]
		- Use a [[search indexer]] to index the text to perform quick searches and autocomplete* sorting autocompletions 
	based on other properties
		
or I might want to change the style of matching* Spelling correction 
	- Possible implementations:
	- Built-in on Mac and iOS; I believe JavaScript uses this implementation
	- Other platforms will almost certainly need a different implementation* Start at the root node 
	#options
1.	Set by the user
2. 	Determined from loom
	Probably not a good answer, because the root node is among the most likely to be involved in cycles

 
* Trigger a change in global state, to initiate autocomplete links 
	Options:  Pattern matching on the string of typed input to look for [[
As one is typing 
	Detect typing 
		[[reagent onkeyup]]
		[[->>]]
		[[e.-target .-value]]

	Update the global state atom -- to say what is currently typed
		[[swap]]
		[[Associate new information to global state]]
		
		
	Checks to see whether last two characters where start of a link
		[[subs]]
		[[=]]
		or 
		[[get]]
		[[get-last]]
		[[count]]
		[[-]]
		
	Update global state atom to say you're within a link

	
Options:  keep an update of last character entered in global state, and trigger change when e.target .value & last = [[
* Write a .org file which represents the hierarchy of this graph 
	#Components

1. Write to a file 

2. Choose the correct number of stars for the indentation

3. Create links to "Parents" which are not the direct parent

4.  [[Eliminate any cycles in the graph]]

5. [[Pasting contents of file at the location of links in Tree view]]



#Abandoned Paths

1.  Each time a node is changed, it is changed at every location that the node exists
	Reason For Abandonment:
		[[Editing MVP]]

2. Write to a file at a specific location in the file		
	RA:	[[Editing MVP]]
	


	
	
* Write a file from nvalt to emacs 
	

(defn print-page [{:keys [name text depth]}]
  (str (header-stars depth) " " name " \n\t" text))




(->> (read-files "./nvalt-proto")
            last
            (zipmap [:name :text])
            (merge {:depth 2})
            print-page
            (#(spit "./nvalt-proto/1.org" % :append true))
            logger)


(-> (java.io.File. ".") .getAbsolutePath)* zipmap 
	Attempt at defining myself on [[March 14, 2016]] at 5:00 
(defn vec-to-map
   "Return a function which accepts a parameter that is destructured according to the names listed.... then create a map where the values are all the names, and... turns out this was just zipmap "
  ([v] (into {}))
  ([v & names] (for [n names]
                     :let i (range 100000)]
                {n (nth v i)})))


(defn zip-map
  [k v]
    (into{} (map vec (partition 2 (interleave k v)))))


http://stackoverflow.com/questions/25548598/what-does-clojures-zip-map-do

Excellent example of documentation 


Example of usage:
(zip-map [:a :b :c] [1 2 3]) ;=> {:a 1, :b 2, :c 3}    
And from the inside out:

	(interleave [:a :b :c] [1 2 3]) 
		;=> (:a 1 :b 2 :c 3)
	(partition 2 '(:a 1 :b 2 :c 3)) 
		;=> ((:a 1) (:b 2) (:c 3))
	(map	 vec '((:a 1) (:b 2) (:c 3))) 
		;=> ([:a 1] [:b 2] [:c 3])
	(into {} '([:a 1] [:b 2] [:c 3])) 
		;=> {:a 1, :b 2, :c 3}
